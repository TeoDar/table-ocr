import requests
import streamlit as st
from streamlit_option_menu import option_menu
import webbrowser


fast_api_url = 'http://127.0.0.1:8000/'


class MainPage:
    '''
    –ö—Ä–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    '''

    def __init__(self) -> None:
        # –ó–∞–¥–∞–Ω–∏–µ –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∞–π—Ç–∞
        st.set_page_config(page_title='–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü', page_icon='üì∞', layout='wide')
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
        with st.sidebar:
            self.draw_side_bar()

        if self.selected in '–®–∞–±–ª–æ–Ω—ã':
            st.title("–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
            st.header('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫–∞–Ω:')
            self.uploaded_file = st.file_uploader('–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–æ–≤ [PDF] –∏ [PNG]', type=('pdf', 'png'))


        if self.selected in '–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º':
            webbrowser.open_new_tab('https://t.me/TeoDar')

        if self.selected in 'test':
            # test
            with open('./FrontEnd/test.html', encoding='utf-8') as f:
                st.markdown(f.read(), unsafe_allow_html=True,)

    def draw_side_bar(self):
        self.selected = option_menu(
            menu_title="TABLE-OCR",
            options=["–®–∞–±–ª–æ–Ω—ã", "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", "–°–ø—Ä–∞–≤–∫–∞", "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º", "test"],
            default_index=0,
            menu_icon="table", 
            icons=['border', 'eye', 'book', 'person lines fill'],
            styles={
                "container": {"background-color": "rgb(14, 17, 23)"},
                # "icon": {"color": "#ffb4b4", "font-size": "25px"},
                "nav-item": {"padding": "2px"},
                "nav-link": {"margin": "0px", "--hover-color": "#eee"},
                "nav-link-selected": {"background-color": "gray"},
                })

    def upload(self):
        with st.sidebar:
            recognize_btn = st.button('–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å')

        if recognize_btn:
            stage_text = '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
            stage = st.text(stage_text)

            file = {"file": (self.uploaded_file.name, self.uploaded_file.getvalue())}
            response = requests.post(f"{fast_api_url}/upload_file", files=file)

            file_hash: str = response.json()["file_hash"]
            extracted_images_hashes: list = response.json()["extracted_images_hashes"]

            for img_hash in extracted_images_hashes:
                try:
                    img_response = requests.get(f"{fast_api_url}/get_image/{file_hash}/{img_hash}", stream=True)
                    img_response.raise_for_status()
                except requests.exceptions.HTTPError as err:
                    st.write(err.response.status_code, ':', err.response.json()['detail'])
                    continue
                image = img_response.content.decode()
                with st.sidebar:
                    with open('./FrontEnd/button_style.txt')as f:
                        button_style = f.read().format(image=image)
                        button_html = f'<button type="button" style="{button_style}">'
                        st.markdown(button_html, unsafe_allow_html=True,)
                with open('./FrontEnd/image_style.txt')as f:
                    image_style = f.read()
                    image_html = f'<img src="data:image/png;base64,{image}" style="{image_style}">'
                    st.markdown(image_html, unsafe_allow_html=True)
            stage.text('–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã')


# with st.spinner('Wait for it...'):
#     time.sleep(5)
# st.success('Done!')



if __name__ == "__main__":
    MainPage()
